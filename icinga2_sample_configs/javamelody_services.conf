globals.get_javamelody_important_requests = function(vhosts) {
  ret_dict = {}
  for (vhost_key => vhost_value in vhosts) {
    port = vhosts[vhost_key]["http_port"]
    path = vhosts[vhost_key]["javamelody_path"]
    try {
      i_r_dict = vhosts[vhost_key]["javamelody_important_requests"]
    } except {
      continue
    }
    for ( i_r_key => i_r_value in i_r_dict){
      i_r_value.javamelody_path = path
      i_r_value.http_port = port
      i_r_value.request_path = i_r_key.split(" ")[0]
      i_r_value.request_method = i_r_key.split(" ")[1]
      ret_dict[port + " " + i_r_key] = i_r_value
    }
  }
  return ret_dict
}

apply Service "File Descriptor Capacity " for (display_description => config in host.vars.http_vhosts) {
  import "generic-service"
  vars += config
  check_command = "javamelody_health"
  vars.javamelody_health_url = "http://127.0.0.1:$http_port$$javamelody_path$"
  vars.javamelody_health_metric = "file_descriptor_capacity_pct"
  vars.javamelody_health_warning = vars.javamelody_health_file_descriptor_capacity_pct_warning
  vars.javamelody_health_critical = vars.javamelody_health_file_descriptor_capacity_pct_critical
  if (vars.javamelody_health_warning == "") { vars.javamelody_health_warning = ":40"  }
  if (vars.javamelody_health_critical == "") { vars.javamelody_health_critical = ":60"  }
  assign where "tomcat" in host.vars.services && config.javamelody_path
  ignore where host.vars.javamelody_disabled
}

apply Service "Heap Capacity " for (display_description => config in host.vars.http_vhosts) {
  import "generic-service"
  vars += config
  check_command = "javamelody_health"
  vars.javamelody_health_url = "http://127.0.0.1:$http_port$$javamelody_path$"
  vars.javamelody_health_metric = "heap_capacity_pct"
  vars.javamelody_health_warning = vars.javamelody_health_heap_capacity_pct_warning
  vars.javamelody_health_critical = vars.javamelody_health_heap_capacity_pct_critical
  if (vars.javamelody_health_warning == "") { vars.javamelody_health_warning = ":95"  }
  if (vars.javamelody_health_critical == "") { vars.javamelody_health_critical = ""  }
  assign where "tomcat" in host.vars.services && config.javamelody_path
  ignore where host.vars.javamelody_disabled
}


apply Service "Thread Capacity " for (display_description => config in host.vars.http_vhosts) {
  import "generic-service"
  vars += config
  check_command = "javamelody_health"
  vars.javamelody_health_url = "http://127.0.0.1:$http_port$$javamelody_path$"
  vars.javamelody_health_metric = "thread_capacity_pct"
  vars.javamelody_health_warning = vars.javamelody_health_thread_capacity_pct_warning
  vars.javamelody_health_critical = vars.javamelody_health_thread_capacity_pct_critical
  if (vars.javamelody_health_warning == "") { vars.javamelody_health_warning = ":85"  }
  if (vars.javamelody_health_critical == "") { vars.javamelody_health_critical = ":93"  }
  assign where "tomcat" in host.vars.services && config.javamelody_path
  ignore where host.vars.javamelody_disabled
}

apply Service "Non Heap Memory Usage Total " for (display_description => config in host.vars.http_vhosts) {
  import "generic-service"
  vars += config
  check_command = "javamelody_health"
  vars.javamelody_health_url = "http://127.0.0.1:$http_port$$javamelody_path$"
  vars.javamelody_health_metric = "nonheap_memory_usage_total"
  vars.javamelody_health_warning = vars.javamelody_health_nonheap_memory_usage_total_warning
  vars.javamelody_health_critical = vars.javamelody_health_nonheap_memory_usage_total_critical
  if (vars.javamelody_health_warning == "") { vars.javamelody_health_warning = "" }
  if (vars.javamelody_health_critical == "") { vars.javamelody_health_critical = "" }
  assign where "tomcat" in host.vars.services && config.javamelody_path
  ignore where host.vars.javamelody_disabled
}

apply Service "Classes Loaded in Total " for (display_description => config in host.vars.http_vhosts) {
  import "generic-service"
  vars += config
  check_command = "javamelody_health"
  vars.javamelody_health_url = "http://127.0.0.1:$http_port$$javamelody_path$"
  vars.javamelody_health_metric = "loaded_classes_count_total"
  vars.javamelody_health_warning = vars.javamelody_health_loaded_classes_count_total_warning
  vars.javamelody_health_critical = vars.javamelody_health_loaded_classes_count_total_critical
  if (vars.javamelody_health_warning == "") { vars.javamelody_health_warning = "" }
  if (vars.javamelody_health_critical == "") { vars.javamelody_health_critical = "" }
  assign where "tomcat" in host.vars.services && config.javamelody_path
  ignore where host.vars.javamelody_disabled
}

apply Service "Total Request Count extrapolated " for (display_description => config in host.vars.http_vhosts) {
  import "generic-service"
  vars += config
  check_command = "javamelody_health"
  vars.javamelody_health_url = "http://127.0.0.1:$http_port$$javamelody_path$"
  vars.javamelody_health_metric = "request_count_timed"
  vars.javamelody_health_warning = vars.javamelody_health_request_count_timed_warning
  vars.javamelody_health_critical = vars.javamelody_health_request_count_timed_critical
  if (vars.javamelody_health_warning == "") { vars.javamelody_health_warning = "" }
  if (vars.javamelody_health_critical == "") { vars.javamelody_health_critical = "" }
  assign where "tomcat" in host.vars.services && config.javamelody_path
  ignore where host.vars.javamelody_disabled
}

apply Service "Time spent on GC extrapolated " for (display_description => config in host.vars.http_vhosts) {
  import "generic-service"
  vars += config
  check_command = "javamelody_health"
  vars.javamelody_health_url = "http://127.0.0.1:$http_port$$javamelody_path$"
  vars.javamelody_health_metric = "garbage_collection_timed"
  vars.javamelody_health_warning = vars.javamelody_health_garbage_collection_timed_warning
  vars.javamelody_health_critical = vars.javamelody_health_garbage_collection_timed_critical
  if (vars.javamelody_health_warning == "") { vars.javamelody_health_warning = ":2500" }
  if (vars.javamelody_health_critical == "") { vars.javamelody_health_critical = "" }
  assign where "tomcat" in host.vars.services && config.javamelody_path
  ignore where host.vars.javamelody_disabled
}

apply Service "Total Error Count extrapolated " for (display_description => config in host.vars.http_vhosts) {
  import "generic-service"
  vars += config
  check_command = "javamelody_health"
  vars.javamelody_health_url = "http://127.0.0.1:$http_port$$javamelody_path$"
  vars.javamelody_health_metric = "error_count_timed"
  vars.javamelody_health_warning = vars.javamelody_health_error_count_timed_warning
  vars.javamelody_health_critical = vars.javamelody_health_error_count_timed_critical
  if (vars.javamelody_health_warning == "") { vars.javamelody_health_warning = ":20" }
  if (vars.javamelody_health_critical == "") { vars.javamelody_health_critical = "" }
  assign where "tomcat" in host.vars.services && config.javamelody_path
  ignore where host.vars.javamelody_disabled
}

apply Service "average response time for " for (request_description => request_config in get_javamelody_important_requests(host.vars.http_vhosts) ) {
  import "generic-service"
  vars += request_config
  check_command = "javamelody_health"
  vars.javamelody_health_url = "http://127.0.0.1:" + vars.http_port + vars.javamelody_path
  vars.javamelody_health_metric = "duration_per_hit_on_path"
  vars.javamelody_health_requestpath = vars.request_path
  vars.javamelody_health_requestmethod = vars.request_method
  vars.javamelody_health_warning = vars.duration_per_hit_on_path_warning
  vars.javamelody_health_critical = vars.duration_per_hit_on_path_critical
  assign where "tomcat" in host.vars.services
  ignore where host.vars.javamelody_disabled
}

apply Service "error ratio for requests to " for (request_description => request_config in get_javamelody_important_requests(host.vars.http_vhosts) ) {
  import "generic-service"
  vars += request_config
  check_command = "javamelody_health"
  vars.javamelody_health_url = "http://127.0.0.1:" + vars.http_port + vars.javamelody_path
  vars.javamelody_health_metric = "errors_per_hit_on_path"
  vars.javamelody_health_requestpath = vars.request_path
  vars.javamelody_health_requestmethod = vars.request_method
  vars.javamelody_health_warning = vars.errors_per_hit_on_path_warning
  vars.javamelody_health_critical = vars.errors_per_hit_on_path_critical
  if (vars.javamelody_health_warning == "") { vars.javamelody_health_warning = ":0.05" }
  if (vars.javamelody_health_critical == "") { vars.javamelody_health_critical = "" }
  assign where "tomcat" in host.vars.services
  ignore where host.vars.javamelody_disabled
}

apply Service "average response size for requests to " for (request_description => request_config in get_javamelody_important_requests(host.vars.http_vhosts) ) {
  import "generic-service"
  vars += request_config
  check_command = "javamelody_health"
  vars.javamelody_health_url = "http://127.0.0.1:" + vars.http_port + vars.javamelody_path
  vars.javamelody_health_metric = "response_size_per_hit_on_path"
  vars.javamelody_health_requestpath = vars.request_path
  vars.javamelody_health_requestmethod = vars.request_method
  vars.javamelody_health_warning = vars.response_size_per_hit_on_path_warning
  vars.javamelody_health_critical = vars.response_size_per_hit_on_path_critical
  assign where "tomcat" in host.vars.services
  ignore where host.vars.javamelody_disabled
}
